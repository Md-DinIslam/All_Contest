<snippet>
	<content><![CDATA[
// Lazy Propagation
const int mxN = 2e5;
ll v[mxN + 1], st[4 * mxN], lazy[4 * mxN];
void build(int s, int e, int rt = 1) {
    if (s == e) st[rt] = v[s];
    else {
        int mid = (s + e) >> 1;
        build(s, mid, 2 * rt);
        build(mid + 1, e, 2 * rt + 1);
        st[rt] = st[2 * rt] + st[2 * rt + 1];
    }
}
ll query(int s, int e, int l, int r, int rt = 1) {
    if (lazy[rt]) {
        st[rt] += lazy[rt] * (e - s + 1);
        if (s != e) {
            lazy[2 * rt] += lazy[rt], lazy[2 * rt + 1] += lazy[rt];
        }
        lazy[rt] = 0;
    }
    if (s > r || e < l) return 0ll;
    if (s >= l && e <= r) return st[rt];
    int mid = (s + e) >> 1;
    ll a = query(s, mid, l, r, 2 * rt);
    ll b = query(mid + 1, e, l, r, 2 * rt + 1);
    return a + b;
    // return query(s,mid,l,r,2*rt) + query(mid+1,e,l,r,2*rt+1);
}
void update(int s, int e, int l, int r, ll val, int rt = 1) {
    if (lazy[rt]) {
        st[rt] += lazy[rt] * (e - s + 1);
        if (s != e) {
            lazy[2 * rt] += lazy[rt], lazy[2 * rt + 1] += lazy[rt];
        }
        lazy[rt] = 0;
    }
    if (s > r || e < l) return;
    if (s >= l && e <= r) {
        st[rt] += val * (e - s + 1);
        if (s != e) {
            lazy[2 * rt] += val, lazy[2 * rt + 1] += val;
        }
    }
    else {
        int mid = (s + e) >> 1;
        update(s, mid, l, r, val, 2 * rt);
        update(mid + 1, e, l, r, val, 2 * rt + 1);
        st[rt] = st[2 * rt] + st[2 * rt + 1];
    }
}]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Lazy Propagation</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
